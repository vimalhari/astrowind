---
import type { CaseStudy } from '../../types/case-study';

export interface Props {
  study: CaseStudy;
}

const { study } = Astro.props;

// Helper function to extract numeric value from strings like "45/100", "4.2 seconds", etc.
function extractNumericValue(value: string): number {
  if (!value || value === 'N/A' || value === 'N/A (New Site)') return 0;
  
  // Handle percentage values like "45/100"
  if (value.includes('/')) {
    const [num, denom] = value.split('/');
    return (parseFloat(num) / parseFloat(denom)) * 100;
  }
  
  // Extract numeric value from strings
  const numericMatch = value.match(/[\d.]+/);
  return numericMatch ? parseFloat(numericMatch[0]) : 0;
}

// Helper function to get visualization percentage (0-100 scale)
function getVisualizationPercentage(before: string, after: string): number {
  const beforeVal = extractNumericValue(before);
  const afterVal = extractNumericValue(after);
  
  if (beforeVal === 0) return 90; // New feature shows as 90%
  
  // For performance metrics, higher values are usually better
  // But for loading times, lower values are better
  const isTimeBased = before.includes('second') || before.includes('ms');
  
  if (isTimeBased) {
    // For time-based metrics, improvement means lower is better
    const maxTime = Math.max(beforeVal, afterVal);
    return Math.round(((maxTime - afterVal) / maxTime) * 100);
  } else {
    // For score-based metrics, higher is better
    return Math.round((afterVal / Math.max(beforeVal, afterVal)) * 100);
  }
}
---

<!-- Animated Performance Metrics Dashboard -->
<section id="metrics" class="px-4 py-20 mx-auto max-w-7xl lg:px-8">
  <!-- Background Pattern -->
  <div class="relative bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-900 dark:to-blue-900/20 rounded-3xl overflow-hidden">
    <!-- Decorative Elements -->
    <div class="absolute top-0 right-0 w-64 h-64 bg-blue-500/10 dark:bg-blue-400/10 rounded-full blur-3xl"></div>
    <div class="absolute bottom-0 left-0 w-48 h-48 bg-purple-500/10 dark:bg-purple-400/10 rounded-full blur-3xl"></div>
    
    <div class="relative p-8 lg:p-16">
      <div class="text-center mb-16">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
          Performance Metrics
        </h2>
        <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
          Measurable improvements that drive real business value and exceptional user experience
        </p>
      </div>

      <!-- Main Metrics Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8 mb-16">
        {study.data.results.performance.slice(0, 4).map((result, index) => {
          const percentage = getVisualizationPercentage(result.before, result.after);
          const circumference = 2 * Math.PI * 45; // radius = 45
          const strokeDashoffset = circumference - (percentage / 100) * circumference;
          
          return (
            <div class="group text-center bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 border border-gray-200/50 dark:border-gray-700/50 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300 hover:transform hover:scale-105">
              <div class="relative mb-6">
                <!-- Animated Progress Circle -->
                <div class="relative w-24 h-24 mx-auto">
                  <svg class="w-24 h-24 transform -rotate-90" viewBox="0 0 100 100">
                    <circle
                      cx="50"
                      cy="50"
                      r="45"
                      stroke="currentColor"
                      stroke-width="6"
                      fill="none"
                      class="text-gray-200 dark:text-gray-600"
                    />
                    <circle
                      cx="50"
                      cy="50"
                      r="45"
                      stroke="currentColor"
                      stroke-width="6"
                      fill="none"
                      stroke-linecap="round"
                      class={`${
                        percentage >= 80 ? 'text-green-500' : 
                        percentage >= 60 ? 'text-blue-500' : 
                        percentage >= 40 ? 'text-yellow-500' : 'text-red-500'
                      } progress-circle`}
                      stroke-dasharray={circumference}
                      stroke-dashoffset={strokeDashoffset}
                      style={`animation-delay: ${index * 0.2}s`}
                    />
                  </svg>
                  <div class="absolute inset-0 flex items-center justify-center">
                    <div class="text-center">
                      <div class="text-lg font-bold text-gray-900 dark:text-white counter" data-target={percentage}>
                        {percentage}%
                      </div>
                    </div>
                  </div>
                </div>
                
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3 leading-tight">
                  {result.metric}
                </h3>
                <div class="space-y-2">
                  <div class="flex items-center justify-between text-sm bg-red-50 dark:bg-red-900/20 rounded-lg px-3 py-2">
                    <span class="text-red-600 dark:text-red-400 font-medium">Before:</span>
                    <span class="font-semibold text-red-700 dark:text-red-300 break-all">{result.before}</span>
                  </div>
                  <div class="flex items-center justify-between text-sm bg-green-50 dark:bg-green-900/20 rounded-lg px-3 py-2">
                    <span class="text-green-600 dark:text-green-400 font-medium">After:</span>
                    <span class="font-semibold text-green-700 dark:text-green-300 break-all">{result.after}</span>
                  </div>
                  <div class="flex items-center justify-center mt-3">
                    <span class="px-3 py-1 text-xs font-bold text-white bg-gradient-to-r from-green-500 to-blue-500 rounded-full">
                      +{result.improvement}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- Detailed Performance Breakdown -->
      <div class="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-gray-200/50 dark:border-gray-700/50">
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">
          Detailed Performance Analysis
        </h3>
        
        <div class="space-y-8">
          {study.data.results.performance.map((result, index) => {
            const isNewSite = result.before === 'N/A (New Site)' || result.before.toLowerCase() === 'n/a';
            
            if (isNewSite) {
              // Handle new site metrics differently
              return (
                <div class="space-y-4 p-6 bg-gradient-to-r from-blue-50 to-transparent dark:from-blue-900/50 dark:to-transparent rounded-xl border border-blue-100 dark:border-blue-800">
                  <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
                    <span class="text-lg font-semibold text-gray-900 dark:text-white break-words">{result.metric}</span>
                    <span class="inline-flex px-3 py-1 text-sm font-bold text-white bg-gradient-to-r from-blue-500 to-purple-500 rounded-full">
                      {result.improvement}
                    </span>
                  </div>
                  
                  <!-- New Site Achievement -->
                  <div class="space-y-2">
                    <div class="flex items-center gap-4">
                      <span class="text-sm font-medium text-blue-600 dark:text-blue-400 w-20 flex-shrink-0">Achievement:</span>
                      <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-4 overflow-hidden">
                        <div 
                          class="progress-bar bg-gradient-to-r from-blue-400 to-blue-500 h-4 rounded-full transition-all duration-1000 ease-out"
                          style={`animation-delay: ${index * 0.3}s; --final-width: 95%;`}
                        ></div>
                      </div>
                      <span class="text-sm font-semibold text-gray-700 dark:text-gray-300 min-w-20 text-right break-all">{result.after}</span>
                    </div>
                    
                    <div class="text-sm text-gray-600 dark:text-gray-400 italic text-center">
                      âœ¨ Built from scratch with industry-leading performance
                    </div>
                  </div>
                </div>
              );
            }
            
            // Handle existing sites with before/after comparison
            const beforeVal = extractNumericValue(result.before);
            const afterVal = extractNumericValue(result.after);
            const isTimeBased = result.before.includes('second') || result.before.includes('ms');
            
            // Calculate bar widths (0-100%)
            let beforeWidth, afterWidth;
            
            if (isTimeBased) {
              // For time-based metrics, normalize to max value
              const maxVal = Math.max(beforeVal, afterVal);
              beforeWidth = Math.round((beforeVal / maxVal) * 100);
              afterWidth = Math.round((afterVal / maxVal) * 100);
            } else {
              // For score-based metrics, use actual percentages or normalize
              if (result.before.includes('/')) {
                beforeWidth = extractNumericValue(result.before);
                afterWidth = extractNumericValue(result.after);
              } else {
                const maxVal = Math.max(beforeVal, afterVal);
                beforeWidth = Math.round((beforeVal / maxVal) * 100);
                afterWidth = Math.round((afterVal / maxVal) * 100);
              }
            }
            
            return (
              <div class="space-y-4 p-6 bg-gradient-to-r from-gray-50 to-transparent dark:from-gray-900/50 dark:to-transparent rounded-xl border border-gray-100 dark:border-gray-800">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
                  <span class="text-lg font-semibold text-gray-900 dark:text-white break-words">{result.metric}</span>
                  <span class="inline-flex px-3 py-1 text-sm font-bold text-white bg-gradient-to-r from-green-500 to-blue-500 rounded-full">
                    {result.improvement} improvement
                  </span>
                </div>
                
                <!-- Before Bar -->
                <div class="space-y-2">
                  <div class="flex items-center gap-4">
                    <span class="text-sm font-medium text-red-600 dark:text-red-400 w-16 flex-shrink-0">Before:</span>
                    <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-4 overflow-hidden">
                      <div 
                        class="progress-bar bg-gradient-to-r from-red-400 to-red-500 h-4 rounded-full transition-all duration-1000 ease-out"
                        style={`animation-delay: ${index * 0.3}s; --final-width: ${beforeWidth}%;`}
                      ></div>
                    </div>
                    <span class="text-sm font-semibold text-gray-700 dark:text-gray-300 min-w-20 text-right break-all">{result.before}</span>
                  </div>
                  
                  <!-- After Bar -->
                  <div class="flex items-center gap-4">
                    <span class="text-sm font-medium text-green-600 dark:text-green-400 w-16 flex-shrink-0">After:</span>
                    <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-4 overflow-hidden">
                      <div 
                        class="progress-bar bg-gradient-to-r from-green-400 to-green-500 h-4 rounded-full transition-all duration-1000 ease-out"
                        style={`animation-delay: ${index * 0.3 + 0.5}s; --final-width: ${afterWidth}%;`}
                      ></div>
                    </div>
                    <span class="text-sm font-semibold text-gray-700 dark:text-gray-300 min-w-20 text-right break-all">{result.after}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
        
        <!-- Business Impact Section -->
        {study.data.results.business && study.data.results.business.length > 0 && (
          <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-6 text-center">
              Business Impact
            </h4>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              {study.data.results.business.map((result) => (
                <div class="text-center p-4 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl border border-blue-200/50 dark:border-blue-700/50">
                  <div class="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-2">
                    +{result.improvement}
                  </div>
                  <div class="text-sm font-medium text-gray-700 dark:text-gray-300 break-words">
                    {result.metric}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</section>

<style>
  .progress-circle {
    animation: drawCircle 2s ease-out forwards;
    transition: stroke 0.3s ease;
  }
  
  .progress-bar {
    width: 0;
    animation: growBar 1.5s ease-out forwards;
  }
  
  @keyframes drawCircle {
    from {
      stroke-dashoffset: 283; /* 2 * Ï€ * 45 */
    }
    to {
      stroke-dashoffset: var(--stroke-dashoffset, 70);
    }
  }
  
  @keyframes growBar {
    from {
      width: 0;
    }
    to {
      width: var(--final-width);
    }
  }
  
  .counter {
    animation: countUp 2s ease-out forwards;
  }
  
  @keyframes countUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Hover effects */
  .group:hover .progress-circle {
    filter: drop-shadow(0 0 8px currentColor);
  }
  
  /* Responsive text breaking */
  .break-all {
    word-break: break-all;
    hyphens: auto;
  }
  
  /* Dark mode improvements */
  @media (prefers-color-scheme: dark) {
    .progress-circle {
      filter: brightness(1.1);
    }
  }
  
  /* Animation delays for staggered effect */
  .progress-bar:nth-child(1) {
    animation-delay: 0.2s;
  }
  
  .progress-bar:nth-child(2) {
    animation-delay: 0.4s;
  }
  
  .progress-bar:nth-child(3) {
    animation-delay: 0.6s;
  }
  
  .progress-bar:nth-child(4) {
    animation-delay: 0.8s;
  }
</style>