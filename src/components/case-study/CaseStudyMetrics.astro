---
import type { CaseStudy } from '../../types/case-study';

export interface Props {
  study: CaseStudy;
}

const { study } = Astro.props;

// Helper function to parse and display improvements more clearly
function getImprovementPercentage(improvement: string): number {
  // Handle qualitative improvements for new sites
  const qualitativeMap: Record<string, number> = {
    'industry leading': 95,
    'excellent performance': 90,
    'perfect scores': 100,
    'mobile optimized': 85,
    'high engagement': 80,
    'enhanced brand': 75,
    'strong seo': 85,
    streamlined: 70,
  };

  const lowerImprovement = improvement.toLowerCase();

  // Check for qualitative matches
  for (const [key, value] of Object.entries(qualitativeMap)) {
    if (lowerImprovement.includes(key)) {
      return value;
    }
  }

  // Try to extract numeric percentage
  const match = improvement.match(/\d+/);
  return match ? parseInt(match[0]) : 75; // Default to 75% for qualitative improvements
}

function formatMetricValue(value: string): string {
  if (value.includes('seconds') || value.includes('s')) return value;
  if (value.includes('/100')) return value;
  if (value.toLowerCase().includes('poor') || value.toLowerCase().includes('red')) return 'Poor';
  if (
    value.toLowerCase().includes('good') ||
    value.toLowerCase().includes('green') ||
    value.toLowerCase().includes('all green')
  )
    return 'Excellent';
  if (value.toLowerCase().includes('n/a')) return 'New Site';
  return value;
}

function formatImprovement(improvement: string): string {
  // Clean up improvement text for display
  if (improvement.toLowerCase().includes('industry leading')) return 'Industry Leading';
  if (improvement.toLowerCase().includes('excellent performance')) return 'Excellent';
  if (improvement.toLowerCase().includes('perfect scores')) return 'Perfect';
  if (improvement.toLowerCase().includes('mobile optimized')) return 'Mobile Optimized';
  return improvement;
}
---

<!-- Enhanced Key Metrics with Clear Context -->
<div class="space-y-3">
  <div class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">Key Performance Results:</div>

  <div class="grid grid-cols-1 gap-3">
    <!-- Performance Metric -->
    {
      study.data.results.performance[0] && (
        <div class="p-3 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-800/50">
          <div class="flex items-center justify-between mb-2">
            <div class="text-sm font-semibold text-green-700 dark:text-green-300">
              {study.data.results.performance[0].metric}
            </div>
            <div class="flex items-center bg-green-100 dark:bg-green-800/50 rounded-md px-2 py-1">
              <svg
                class="w-3 h-3 text-green-600 dark:text-green-400 mr-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                />
              </svg>
              <span class="text-xs font-bold text-green-700 dark:text-green-300">
                {formatImprovement(study.data.results.performance[0].improvement)}
              </span>
            </div>
          </div>

          <div class="flex items-center justify-between text-xs">
            <div class="flex items-center space-x-2">
              <span class="text-red-600 dark:text-red-400 font-medium">Before:</span>
              <span class="text-gray-700 dark:text-gray-300">
                {formatMetricValue(study.data.results.performance[0].before)}
              </span>
            </div>
            <div class="flex items-center space-x-2">
              <span class="text-green-600 dark:text-green-400 font-medium">After:</span>
              <span class="text-gray-700 dark:text-gray-300 font-semibold">
                {formatMetricValue(study.data.results.performance[0].after)}
              </span>
            </div>
          </div>

          <div class="mt-2">
            <div class="w-full bg-green-200 dark:bg-green-800/30 rounded-full h-2">
              <div
                class="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full transition-all duration-1000 ease-out"
                style={{
                  width: Math.min(getImprovementPercentage(study.data.results.performance[0].improvement), 100) + '%',
                }}
              />
            </div>
          </div>
        </div>
      )
    }

    <!-- Business Impact Metric -->
    {
      study.data.results.business[0] && (
        <div class="p-3 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border border-blue-200 dark:border-blue-800/50">
          <div class="flex items-center justify-between mb-2">
            <div class="text-sm font-semibold text-blue-700 dark:text-blue-300">
              {study.data.results.business[0].metric}
            </div>
            <div class="flex items-center bg-blue-100 dark:bg-blue-800/50 rounded-md px-2 py-1">
              <svg
                class="w-3 h-3 text-blue-600 dark:text-blue-400 mr-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
                />
              </svg>
              <span class="text-xs font-bold text-blue-700 dark:text-blue-300">
                {formatImprovement(study.data.results.business[0].improvement)}
              </span>
            </div>
          </div>

          <div class="text-xs text-blue-600 dark:text-blue-400">Business Results</div>

          <div class="mt-2">
            <div class="w-full bg-blue-200 dark:bg-blue-800/30 rounded-full h-2">
              <div
                class="bg-gradient-to-r from-blue-500 to-indigo-500 h-2 rounded-full transition-all duration-1000 ease-out"
                style={{
                  width: Math.min(getImprovementPercentage(study.data.results.business[0].improvement), 100) + '%',
                }}
              />
            </div>
          </div>
        </div>
      )
    }
  </div>
</div>
